Part A; 5.1-
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();
const PORT = 3000;
app.use(cors());
app.use(express.json());
mongoose.connect('mongodb://localhost:27017/productdb', {
useNewUrlParser: true,
useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));
const productSchema = new mongoose.Schema({
name: {
type: String,
required: true,
trim: true
},
price: {
type: Number,
required: true,
min: 0
},
category: {
type: String,
required: true,
trim: true
}
}, {
timestamps: true
});
const Product = mongoose.model('Product', productSchema);
app.get('/products', async (req, res) => {
try {
const products = await Product.find();
res.status(200).json(products);
} catch (error) {
res.status(500).json({ 
message: 'Error fetching products', 
error: error.message 
});
}
});
app.get('/products/:id', async (req, res) => {
try {
const product = await Product.findById(req.params.id);
if (!product) {
return res.status(404).json({ message: 'Product not found' });
}
res.status(200).json(product);
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid product ID' });
}
res.status(500).json({ 
message: 'Error fetching product', 
error: error.message 
});
}
});
app.post('/products', async (req, res) => {
try {
const { name, price, category } = req.body;
if (!name || !price || !category) {
return res.status(400).json({ 
message: 'Name, price, and category are required' 
});
}
const product = new Product({ name, price, category });
const savedProduct = await product.save();
res.status(201).json(savedProduct);
} catch (error) {
res.status(500).json({ 
message: 'Error creating product', 
error: error.message 
});
}
});
app.put('/products/:id', async (req, res) => {
try {
const updatedProduct = await Product.findByIdAndUpdate(
req.params.id,
req.body,
{ new: true, runValidators: true }
);
if (!updatedProduct) {
return res.status(404).json({ message: 'Product not found' });
}
res.status(200).json({
message: 'Product updated successfully',
product: updatedProduct
});
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid product ID' });
}
res.status(500).json({ 
message: 'Error updating product', 
error: error.message 
});
}
});
app.delete('/products/:id', async (req, res) => {
try {
const deletedProduct = await Product.findByIdAndDelete(req.params.id);
if (!deletedProduct) {
return res.status(404).json({ message: 'Product not found' });
}
res.status(200).json({
message: 'Product deleted',
product: deletedProduct
});
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid product ID' });
}
res.status(500).json({ 
message: 'Error deleting product', 
error: error.message 
});
}
});
app.listen(PORT, () => {
console.log(`Server running on http://localhost:${PORT}`);
});




Part B: 5.2-
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();
const PORT = 3000;
app.use(cors());
app.use(express.json());
mongoose.connect('mongodb://localhost:27017/studentdb', {
useNewUrlParser: true,
useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));
const studentSchema = new mongoose.Schema({
name: {
type: String,
required: true,
trim: true
},
age: {
type: Number,
required: true,
min: 16,
max: 60
},
course: {
type: String,
required: true,
trim: true
}
}, {
timestamps: true
});
const Student = mongoose.model('Student', studentSchema);
app.get('/students', async (req, res) => {
try {
const students = await Student.find();
res.status(200).json(students);
} catch (error) {
res.status(500).json({ 
message: 'Error fetching students', 
error: error.message 
});
}
});
app.get('/students/:id', async (req, res) => {
try {
const student = await Student.findById(req.params.id);
if (!student) {
return res.status(404).json({ message: 'Student not found' });
}
res.status(200).json(student);
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid student ID' });
}
res.status(500).json({ 
message: 'Error fetching student', 
error: error.message 
});
}
});
app.post('/students', async (req, res) => {
try {
const { name, age, course } = req.body;
if (!name || !age || !course) {
return res.status(400).json({ 
message: 'Name, age, and course are required' 
});
}
const student = new Student({ name, age, course });
const savedStudent = await student.save();
res.status(201).json(savedStudent);
} catch (error) {
res.status(500).json({ 
message: 'Error creating student', 
error: error.message 
});
}
});
app.put('/students/:id', async (req, res) => {
try {
const { name, age, course } = req.body;
const updateData = {};
if (name) updateData.name = name;
if (age) updateData.age = age;
if (course) updateData.course = course;
const updatedStudent = await Student.findByIdAndUpdate(
req.params.id,
updateData,
{ new: true, runValidators: true }
);
if (!updatedStudent) {
return res.status(404).json({ message: 'Student not found' });
}
res.status(200).json({
message: 'Student updated successfully',
student: updatedStudent
});
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid student ID' });
}
res.status(500).json({ 
message: 'Error updating student', 
error: error.message 
});
}
});
app.delete('/students/:id', async (req, res) => {
try {
const deletedStudent = await Student.findByIdAndDelete(req.params.id);
if (!deletedStudent) {
return res.status(404).json({ message: 'Student not found' });
}
res.status(200).json({
message: 'Student deleted',
student: deletedStudent
});
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid student ID' });
}
res.status(500).json({ 
message: 'Error deleting student', 
error: error.message 
});
}
});
app.listen(PORT, () => {
console.log(`Server running on http://localhost:${PORT}`);
});




Part C:5.3-
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();
const PORT = 3000;
app.use(cors());
app.use(express.json());
mongoose.connect('mongodb://localhost:27017/ecommerce', {
useNewUrlParser: true,
useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('MongoDB connection error:', err));
const variantSchema = new mongoose.Schema({
color: {
type: String,
required: true
},
size: {
type: String,
required: true
},
stock: {
type: Number,
required: true,
min: 0
}
});
const productSchema = new mongoose.Schema({
name: {
type: String,
required: true,
trim: true
},
price: {
type: Number,
required: true,
min: 0
},
category: {
type: String,
required: true,
trim: true
},
variants: [variantSchema]
}, {
timestamps: true
});
const Product = mongoose.model('Product', productSchema);
app.get('/products', async (req, res) => {
try {
const products = await Product.find();
res.status(200).json(products);
} catch (error) {
res.status(500).json({ 
message: 'Error fetching products', 
error: error.message 
});
}
});
app.get('/products/category/:category', async (req, res) => {
try {
const { category } = req.params;
const products = await Product.find({ category: category });
res.status(200).json(products);
} catch (error) {
res.status(500).json({ 
message: 'Error fetching products by category', 
error: error.message 
});
}
});
app.get('/products/by-color/:color', async (req, res) => {
try {
const { color } = req.params;
const products = await Product.find({
'variants.color': color
});
res.status(200).json(products);
} catch (error) {
res.status(500).json({ 
message: 'Error fetching products by color', 
error: error.message 
});
}
});
app.get('/products/:id', async (req, res) => {
try {
const product = await Product.findById(req.params.id);
if (!product) {
return res.status(404).json({ message: 'Product not found' });
}
res.status(200).json(product);
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid product ID' });
}
res.status(500).json({ 
message: 'Error fetching product', 
error: error.message 
});
}
});
app.post('/products', async (req, res) => {
try {
const { name, price, category, variants } = req.body;
if (!name || !price || !category) {
return res.status(400).json({ 
message: 'Name, price, and category are required' 
});
}
const product = new Product({ 
name, 
price, 
category, 
variants: variants || [] 
});
const savedProduct = await product.save();
res.status(201).json(savedProduct);
} catch (error) {
res.status(500).json({ 
message: 'Error creating product', 
error: error.message 
});
}
});
app.put('/products/:id', async (req, res) => {
try {
const updatedProduct = await Product.findByIdAndUpdate(
req.params.id,
req.body,
{ new: true, runValidators: true }
);
if (!updatedProduct) {
return res.status(404).json({ message: 'Product not found' });
}
res.status(200).json({
message: 'Product updated successfully',
product: updatedProduct
});
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid product ID' });
}
res.status(500).json({ 
message: 'Error updating product', 
error: error.message 
});
}
});
app.delete('/products/:id', async (req, res) => {
try {
const deletedProduct = await Product.findByIdAndDelete(req.params.id);
if (!deletedProduct) {
return res.status(404).json({ message: 'Product not found' });
}
res.status(200).json({
message: 'Product deleted',
product: deletedProduct
});
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid product ID' });
}
res.status(500).json({ 
message: 'Error deleting product', 
error: error.message 
});
}
});
app.post('/products/:id/variants', async (req, res) => {
try {
const { color, size, stock } = req.body;
if (!color || !size || !stock) {
return res.status(400).json({ 
message: 'Color, size, and stock are required for variant' 
});
}
const product = await Product.findById(req.params.id);
if (!product) {
return res.status(404).json({ message: 'Product not found' });
}
product.variants.push({ color, size, stock });
const updatedProduct = await product.save();
res.status(201).json(updatedProduct);
} catch (error) {
if (error.kind === 'ObjectId') {
return res.status(400).json({ message: 'Invalid product ID' });
}
res.status(500).json({ 
message: 'Error adding variant', 
error: error.message 
});
}
});
app.listen(PORT, () => {
console.log(`Server running on http://localhost:${PORT}`);
});
